INPUT/OUTPUT OF A SIMPLE GRAPH
#include <iostream>
#include<vector>
using namespace std;
int main(){
    int v,E;
    cout<<"How many vertices in the graph?";
    cin>>v;
    cout<<"How many edges in the graph";
    cin>>E;
    vector<int>AdjList[v];
    int a ,b;
    for(int i = 1; i<=E ; i++)
    {
    cout<<"enter the end point of edge"<<i;
       cin>>a>>b;
    
       AdjList[a].push_back(b);
       AdjList[b].push_back(a);

       
    }
    for(int i = 0; i<v;i++)
    { 
        for(int j = 0 ;j< AdjList[i].size(); j++)
        {
            cout<<i<<":"<<<<AdjList[i][j]<<" ";
        }
        cout<<endl;
    }
    }
    
    
    
    INPUT/OUTPUT OF WEIGHTED GRAPH(DIRECTED AND UNDIRECTED)
    DIRECTED
    #include <bits/stdc++.h>
using namespace std;
int main()
{
    int v;
    cin>>v;
    int e;
    cin>>e;
    //vector<vector<pair<int,int>>>W;
    vector<pair<int,int>>V[v];
    for(int i = 1;i<=e ; i++)
    {
        int a,b,w;
        cin>>a>>b>>w;
        V[a].push_back({b,w});
    }
    
    for(int i = 0 ; i<v ; i++)
    {
        for(int j = 0 ; j<V[i].size(); j++)
        {
            cout<<i<<":"<<"("<<V[i][j].first<<","<<V[i][j].second<<")"<<" ";
        }
        cout<<endl;
    }
    
}

UNDIRECTED
#include <bits/stdc++.h>
using namespace std;
int main()
{
    int v;
    cin>>v;
    int e;
    cin>>e;
    //vector<vector<pair<int,int>>>W;
    vector<pair<int,int>>V[v];
    for(int i = 1;i<=e ; i++)
    {
        int a,b,w;
        cin>>a>>b>>w;
        V[a].push_back({b,w});
        V[b].push_back({a,w});
    }
    
    for(int i = 0 ; i<v ; i++)
    {
        for(int j = 0 ; j<V[i].size(); j++)
        {
            cout<<i<<":"<<"("<<V[i][j].first<<","<<V[i][j].second<<")"<<" ";
        }
        cout<<endl;
    }
    
}


BFS

#include<bits/stdc++.h>
using namespace std;
void BFS(vector<int>AdjList[],int v)
{
vector<int> visited(v,0);
queue<int>q;
q.push(0);
visited[0] = 1;
while(!q.empty())
{
    int x = q.front();
    q.pop();
    for(int i = 0 ; i<AdjList[x].size();i++)
    {
        if(visited[AdjList[x][i]] == 0)
        {
            q.push(AdjList[x][i]);
            visited[AdjList[x][i]] = 1;
        }
    }
    cout<<x<<" ";
}
}
int main()
{
    int v;
    cin>>v;
    int e;
    cin>>e;
    vector<int>AdjList[v];
    for(int i = 1 ; i<=e ; i++)
    {
        int a,b;
        cin>>a>>b;
        AdjList[a].push_back(b);
        AdjList[b].push_back(a);
    }
    BFS(AdjList,v);
}

DFS---------------------------------------------------------------------------------------------------------------------------------#include<iostream>
#include <vector>
using namespace std;
vector<int> visited ;
void dfs_visited(int i , vector<int> &visited,vector<int> AdjList[])
{
    cout<<i;
    visited[i] = 1;
    for(int j =0 ; j<AdjList[i].size(); j++)
    {
        if(visited[AdjList[i][j]] == 0)
        dfs_visited(AdjList[i][j],visited,AdjList);
    }
}
void dfs(vector<int> AdjList[] , int v)
{
 vector <int> visited(v,0);
 for(int i =0 ; i<v; i++)
 {
    if (visited[i] == 0){
        dfs_visited(i,visited,AdjList);
    }
 }
}
int main(){
    int v,E;
   // cout<<"How many vertices in the graph?";
    cin>>v;
    cin>>E;
    vector<int>AdjList[v];
    int a ,b ;
    for(int i = 1; i<=E ; i++)
    {
       cout<<"e"<<i<<":";
       cin>>a>>b;
       AdjList[a].push_back(b);
    }
    for(int i = 0 ; i<v;i++)
    {
        for(int j = 0;j<AdjList[i].size();j++)
        {
            cout<<AdjList[i][j]<<" ";
        }
        cout<<endl;
    
    
    }
    dfs(AdjList,v);
}



